import{j as t,r as n}from"./index-94dceae6.js";import{A as B}from"./AdminSidebar-b01626fa.js";import{a as E,B as b}from"./Charts-c0264ed6.js";/* empty css                  */import"./iconBase-5d1ce741.js";const v=({data:r,labels:i,datasetLabels:l,backgroundColors:h=["rgba(255, 99, 132, 0.7)","rgba(54, 162, 235, 0.7)","rgba(255, 206, 86, 0.7)","rgba(75, 192, 192, 0.7)","rgba(153, 102, 255, 0.7)","rgba(255, 159, 64, 0.7)"]})=>{const e={responsive:!0,plugins:{legend:{display:!0},title:{display:!1}},scales:{x:{stacked:!0},y:{stacked:!0}}},p={labels:i,datasets:r.map((c,u)=>({label:l[u],data:c,backgroundColor:h[u]}))};return t.jsx(E,{options:e,data:p})},y=["gpt-3.5-turbo","gpt-3.5-turbo-1106","gpt-3.5-turbo-0613","gpt-3.5-turbo-0301","gpt-3.5-turbo-0125","gpt-3.5-turbo-16k","gpt-3.5-turbo-16k-0613"],G=["Jan","Feb","March","April","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec"],$=()=>{const[r,i]=n.useState([]),[l,h]=n.useState([]),[e,p]=n.useState("month"),[c,u]=n.useState(!0),[S,C]=n.useState([]);n.useEffect(()=>{(async()=>{try{const d=await fetch(`https://truefoundry-0-0-0-release.onrender.com/dashboard/bar-chart?groupBy=${e}`),_=await fetch("https://truefoundry-0-0-0-release.onrender.com/dashboard/gpt-models");if(!d.ok||!_.ok)throw new Error("Failed to fetch GPT models data");const I=await d.json(),k=await _.json();i(I),h(k);const T=y.map(async f=>{const x=await fetch(`https://truefoundry-0-0-0-release.onrender.com/dashboard/model-dist?timeRange=${e}&model=${f}`);if(!x.ok)throw new Error(`Failed to fetch data for model ${f}`);const A=await x.json();let o;e==="month"?o=11:e==="year"?o=10:e==="day"?o=new Date(new Date().getFullYear(),11,31).getDate():e==="hour"?o=23:e==="quarter"&&(o=3);const g=Array(o+1).fill(0);return A.forEach(s=>{const j=e==="month"?s.month:e==="year"?s.year:e==="day"?s.day:e==="hour"?s.hour:s.quarter;e==="year"?g[j-2024]=parseInt(s.total_requests):g[j-1]=parseInt(s.total_requests)}),g}),w=await Promise.all(T);C(w),u(!1)}catch(d){console.error("Error fetching data:",d)}})()},[e]);const m=()=>{switch(e){case"month":return r.map(a=>`${G[a.group_key-1]}`);case"year":return r.map(a=>a.group_key.toString());case"hour":return r.map(a=>`${a.group_key}:00`);case"day":return r.map(a=>`Day ${a.group_key}`);case"quarter":return r.map(a=>`Q${a.group_key}`);default:return[]}},D=a=>{p(a.target.value)};return t.jsxs("div",{className:"admin-container",children:[t.jsx(B,{}),t.jsxs("main",{className:"chart-container",children:[t.jsx("h1",{children:"STATISTICAL CHARTS"}),t.jsxs("div",{className:"select-container",children:[t.jsx("label",{htmlFor:"groupBy",className:"select-label"}),t.jsxs("select",{id:"groupBy",className:"select-dropdown",value:e,onChange:D,children:[t.jsx("option",{value:"hour",children:"Hour"}),t.jsx("option",{value:"day",children:"Day"}),t.jsx("option",{value:"month",children:"Month"}),t.jsx("option",{value:"quarter",children:"Quarter"}),t.jsx("option",{value:"year",children:"Year"})]})]}),t.jsxs("section",{children:[t.jsx(b,{data_1:r.map(a=>parseInt(a.total_input_tokens)),data_2:r.map(a=>parseInt(a.total_output_tokens)),title_1:"Input Tokens",title_2:"Output Tokens",bgColor_1:"hsl(260,50%,30%)",bgColor_2:"hsl(360,90%,90%)",labels:m()}),t.jsx("h2",{children:"TOKEN USAGE"})]}),!c&&t.jsxs("section",{children:[t.jsx(b,{data_1:l.map(a=>a.total_requests),title_1:"API CALLS",bgColor_1:"hsl(240, 40%, 50%)",labels:l.map(a=>a.model),data_2:[],title_2:"",bgColor_2:""}),t.jsx("h2",{children:"AGGREGRATE GPT MODEL DISTRIBUTION"})]}),c?t.jsx("p",{children:"Loading..."}):t.jsx(v,{data:S,labels:m(),datasetLabels:y}),t.jsxs("section",{children:[t.jsx("h2",{children:"MODELS DISTRIBUTION"}),t.jsx(b,{horizontal:!1,data_1:r.map(a=>parseInt(a.total_success_count)),data_2:r.map(a=>parseInt(a.total_failure_count)),title_1:"Success",title_2:"Failures",bgColor_1:"hsl(180, 40%, 50%)",bgColor_2:"hsl(0, 40%, 50%)",labels:m()}),t.jsx("h2",{children:"SUCCESS STATISTICS"})]})]})]})};export{$ as default};
